# 03 modelの作り方
* Backbone.Model.extend
* defaults
* toJSON()

// Model
var Task = Backbone.Model.extend({
  defaults: {
    title: 'do something!',
    completed: false
  }
});
var task1 = new Task({
  completed: true
});
console.log(task1.toJSON());
})();


# 04 get/set
* get/set
* methodも可能
task1.set('title', 'newTitle');
var title = task1.get('title');


var Task = Backbone.Model.extend({
  defaults: {
    title: 'do something!',
    completed: false
  },
  toggle: function() {
    this.set('completed', !this.get('completed'));
  }
});
console.log(task1.toJSON());
task1.toggle();
console.log(task1.toJSON());


# 05 validate
var Task = Backbone.Model.extend({
  defaults: {
    title: 'do something!',
    completed: false
  },
  validate: function(attrs) {
    if (_.isEmpty(attrs.title)) {
      return "title must not be empty!";
    }
  },
  toggle: function() {
    this.set('completed', !this.get('completed'));
  }
});

console.log(task1.toJSON());
task1.set({title: ''}, {validate: true});
console.log(task1.toJSON());


# 06 view
* tagName重要
* el
* $el -> jquery object
* className/id も付けれる

var taskView = new TaskView({model: task});
console.log(taskView.$el);

var TaskView = Backbone.View.extend({
  tagName: 'li',
  className: 'liClass',
  id: 'liId'
});


# 07 render, template
var TaskView = Backbone.View.extend({
  tagName: 'li',
  template: _.template("<%- title %>"),
  render: function() {
    var template = this.template(this.model.toJSON());
    this.$el.html(template);
    return this;
  }
});
var taskView = new TaskView({model: task});
console.log(taskView.render().el);


# 08 外部template
* 定義
<script type="text/template" id="task-template">
  <%- title %>
</script>

* 利用方法
template: _.template($('#task-template').html()),

* 表示
$('body').append(taskView.render().el);
